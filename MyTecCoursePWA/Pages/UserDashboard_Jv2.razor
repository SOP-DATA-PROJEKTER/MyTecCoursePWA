@page "/UserDashboard_Jv2"
@using MyTecCoursePWA.Models
@using MyTecCoursePWA.Components.Selectors
@inject MockEducationService EducationService

<div class="wrapper flex flex-col space-y-6 bg-[var(--background-color-secondary)] px-4 py-6">
    <div class="rounded-lg p-6 shadow-lg shadow-black">
        <div class="mb-4 flex items-center space-x-3">
            <div class="h-12 w-12 overflow-hidden rounded-full">
                <img src="./ProfilePicture_Default.jpg" alt="Profile Picture" class="h-full w-full object-cover" />
            </div>
            <div class="mx-4 flex-1 border-b-2">
                <input type="text" name="name" value="@user.Name" class="w-full pl-4 text-black focus:border-black focus:outline-none focus:border-b-0 focus:border-2" placeholder="Enter your name" />
            </div>
        </div>

        <div class="grid grid-cols-1 gap-4 sm:grid-cols-3">
            <StyledSelector TItem="Education"
            Items="educationList"
            SelectedValue="@selectedEducationName"
            SelectedValueChanged="@(value => OnSelectionChanged(value, SelectionType.Education))" />

            <StyledSelector TItem="Pathway"
            Items="selectedEducation?.Pathways ?? new List<Pathway>()"
            SelectedValue="@selectedPathwayName"
            SelectedValueChanged="@(value => OnSelectionChanged(value, SelectionType.Pathway))" />

            <StyledSelector TItem="Specialization"
            Items="selectedPathway?.Specializations ?? new List<Specialization>()"
            SelectedValue="@selectedSpecializationName"
            SelectedValueChanged="@(value => OnSelectionChanged(value, SelectionType.Specialization))" />

            <StyledSelector TItem="Course"
            Items="selectedSpecialization?.Courses ?? new List<Course>()"
            SelectedValue="@selectedCourseName"
            SelectedValueChanged="@(value => OnSelectionChanged(value, SelectionType.Course))" />

        </div>
    </div>

    @for (int i = 0; i < subjectList.Count; i++)
    {
        var subject = subjectList[i];
        var colorClass = GetColorClass((ColorSelection)(i % 2));
        var textColorClass = GetTextColorClass((ColorSelection)(i % 2));

        <div class="@($"space-y-4 rounded-lg p-6 shadow-lg shadow-black {colorClass}")">
            <div class="p-4">
                <h3 class="@($"{textColorClass} pb-4 font-semibold")">@subject.Name</h3>
                <div class="space-y-4">
                    @foreach (var milestone in subject.Milestones)
                    {
                        <div>
                            <h4 class="@($"{textColorClass} text-md font-medium")">@milestone.Description</h4>
                        </div>
                    }
                </div>
            </div>
        </div>
    }

</div>

@code {
    private string selectedEducationName;
    private string selectedPathwayName;
    private string selectedSpecializationName;
    private string selectedCourseName;

    private Education selectedEducation;
    private Pathway selectedPathway;
    private Specialization selectedSpecialization;
    private Course selectedCourse;
    private List<Subject> subjectList;
    private List<Education> educationList;
    private User user;

    private enum SelectionType
    {
        Education,
        Pathway,
        Specialization,
        Course
    }

    private enum ColorSelection
    {
        Color1,
        Color2,
        // Color3,
        // Color4
    }

    private string GetColorClass(ColorSelection selection)
    {
        return selection switch
        {
            ColorSelection.Color1 => "bg-[var(--background-secondary)]",
            ColorSelection.Color2 => "text-[var(--text-color-secondary)]",
            // ColorSelection.Color3 => "bg-pink-100",
            // ColorSelection.Color4 => "bg-rose-100 ",
            _ => "bg-white"
        };
    }

    private string GetTextColorClass(ColorSelection selection)
    {
        return selection switch
        {
            ColorSelection.Color1 => "text-[var(--text-color-secondary)]",
            ColorSelection.Color2 => "text-[var(--background-secondary)]",
        };
    }

    private void OnSelectionChanged(string value, SelectionType selectionType)
    {
        switch (selectionType)
        {
            case SelectionType.Education:
                selectedEducationName = value;
                selectedEducation = educationList.Find(x => x.Name == selectedEducationName);

                // Ensure pathway is null and UI does not preselect one
                selectedPathway = null;
                selectedSpecialization = null;
                selectedCourse = null;

                selectedPathwayName = null;  // Instead of empty string
                selectedSpecializationName = null;
                selectedCourseName = null;
                break;

            case SelectionType.Pathway:
                selectedPathwayName = value;
                selectedPathway = selectedEducation?.Pathways?.Find(x => x.Name == selectedPathwayName);
                selectedSpecialization = null;
                selectedCourse = null;

                selectedSpecializationName = null;
                selectedCourseName = null;
                break;

            case SelectionType.Specialization:
                selectedSpecializationName = value;
                selectedSpecialization = selectedPathway?.Specializations?.Find(x => x.Name == selectedSpecializationName);
                selectedCourse = null;
                selectedCourseName = null;
                break;

            case SelectionType.Course:
                selectedCourseName = value;
                selectedCourse = selectedSpecialization?.Courses?.Find(x => x.Name == selectedCourseName);
                break;
        }

        updateSubjectList();
    }


    protected override void OnInitialized()
    {
        educationList = EducationService.GetEducationList();
        selectedEducation = educationList.Find(x => x.Name == "EUD");
        selectedPathway = selectedEducation?.Pathways.Find(x => x.Name == "Data og Kommunikation");
        selectedSpecialization = selectedPathway?.Specializations.Find(x => x.Name == "Programmering");
        selectedCourse = selectedSpecialization?.Courses.Find(x => x.Name == "Hovedforløb 1");

        selectedEducationName = selectedEducation?.Name ?? "";
        selectedPathwayName = selectedPathway?.Name ?? "";
        selectedSpecializationName = selectedSpecialization?.Name ?? "";
        selectedCourseName = selectedCourse?.Name ?? "";


        user = new User
            {
                Name = "John Doe",
                SelectedEducation = selectedEducation?.Name ?? "",
                SelectedPathway = selectedPathway?.Name ?? "",
                SelectedSpecialization = selectedSpecialization?.Name ?? "",
                SelectedCourse = selectedCourse?.Name ?? ""
            };

        updateSubjectList();
    }

    private void updateSubjectList()
    {
        subjectList = selectedCourse?.Subjects ?? new List<Subject>();
        StateHasChanged();
    }

    public class User
    {
        public string Name { get; set; }
        public string SelectedEducation { get; set; }
        public string SelectedPathway { get; set; }
        public string SelectedSpecialization { get; set; }
        public string SelectedCourse { get; set; }
    }
}
