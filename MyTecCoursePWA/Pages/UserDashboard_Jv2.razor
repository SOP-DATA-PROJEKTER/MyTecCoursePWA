@page "/UserDashboard_Jv2"
@using MyTecCoursePWA.Models
@inject MockEducationService EducationService

<div class="wrapper flex flex-col space-y-6 bg-[var(--background)] px-4 py-6" >
    <div class="rounded-lg border border-[var(--background)] bg-white p-6 shadow-lg shadow-black">
        <div class="mb-4 flex items-center space-x-3">
            <div class="h-12 w-12 overflow-hidden rounded-full">
                <img src="./ProfilePicture_Default.jpg" alt="Profile Picture" class="h-full w-full object-cover" />
            </div>
            <div class="flex-1">
                <input type="text" name="name" value="@user.Name" class="w-full border p-2 text-black" placeholder="Enter your name" />
            </div>
        </div>

        <div class="grid grid-cols-1 gap-4 sm:grid-cols-3">
            <MyTecCoursePWA.Components.Selectors.StyledSelector TItem="Education"
                                                                Items="educationList"
                                                                SelectedValue="@selectedEducationName"
                                                                SelectedValueChanged="@(value => OnSelectionChanged(value, SelectionType.Education))" />

            <MyTecCoursePWA.Components.Selectors.StyledSelector TItem="Pathway"
                                                                Items="selectedEducation?.Pathways ?? new List<Pathway>()"
                                                                SelectedValue="@selectedPathwayName"
                                                                SelectedValueChanged="@(value => OnSelectionChanged(value, SelectionType.Pathway))" />

            <MyTecCoursePWA.Components.Selectors.StyledSelector TItem="Specialization"
                                                                Items="selectedPathway?.Specializations ?? new List<Specialization>()"
                                                                SelectedValue="@selectedSpecializationName"
                                                                SelectedValueChanged="@(value => OnSelectionChanged(value, SelectionType.Specialization))" />

            <MyTecCoursePWA.Components.Selectors.StyledSelector TItem="Course"
                                                                Items="selectedSpecialization?.Courses ?? new List<Course>()"
                                                                SelectedValue="@selectedCourseName"
                                                                SelectedValueChanged="@(value => OnSelectionChanged(value, SelectionType.Course))" />

        </div>
    </div>

    @if (!string.IsNullOrEmpty(selectedCourseName) && subjectList.Any())
    {
        <div class="space-y-6">
            @foreach (var subject in subjectList)
            {
                <div class="space-y-4 rounded-lg bg-white p-6 shadow-lg shadow-black">
                    <h3 class="font-semibold text-black">@subject.Name</h3>
                    <div class="space-y-4">
                        @foreach (var milestone in subject.Milestones)
                        {
                            <div class="">
                                <h4 class="text-md font-medium text-black">@milestone.Description</h4>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private string selectedEducationName;
    private string selectedPathwayName;
    private string selectedSpecializationName;
    private string selectedCourseName;

    private Education selectedEducation;
    private Pathway selectedPathway;
    private Specialization selectedSpecialization;
    private Course selectedCourse;
    private List<Subject> subjectList;
    private List<Education> educationList;
    private User user;

    private enum SelectionType
    {
        Education,
        Pathway,
        Specialization,
        Course
    }

    private void OnSelectionChanged(string value, SelectionType selectionType)
    {
        switch (selectionType)
        {
            case SelectionType.Education:
                selectedEducationName = value;
                selectedEducation = educationList.Find(x => x.Name == selectedEducationName);

                // Ensure pathway is null and UI does not preselect one
                selectedPathway = null;
                selectedSpecialization = null;
                selectedCourse = null;

                selectedPathwayName = null;  // Instead of empty string
                selectedSpecializationName = null;
                selectedCourseName = null;
                break;

            case SelectionType.Pathway:
                selectedPathwayName = value;
                selectedPathway = selectedEducation?.Pathways?.Find(x => x.Name == selectedPathwayName);
                selectedSpecialization = null;
                selectedCourse = null;

                selectedSpecializationName = null;
                selectedCourseName = null;
                break;

            case SelectionType.Specialization:
                selectedSpecializationName = value;
                selectedSpecialization = selectedPathway?.Specializations?.Find(x => x.Name == selectedSpecializationName);
                selectedCourse = null;
                selectedCourseName = null;
                break;

            case SelectionType.Course:
                selectedCourseName = value;
                selectedCourse = selectedSpecialization?.Courses?.Find(x => x.Name == selectedCourseName);
                break;
        }

        updateSubjectList();
    }


    protected override void OnInitialized()
    {
        educationList = EducationService.GetEducationList();
        selectedEducation = educationList.Find(x => x.Name == "EUD");
        selectedPathway = selectedEducation?.Pathways.Find(x => x.Name == "Data og Kommunikation");
        selectedSpecialization = selectedPathway?.Specializations.Find(x => x.Name == "Programmering");
        selectedCourse = selectedSpecialization?.Courses.Find(x => x.Name == "Hovedforløb 1");

        selectedEducationName = selectedEducation?.Name ?? "";
        selectedPathwayName = selectedPathway?.Name ?? "";
        selectedSpecializationName = selectedSpecialization?.Name ?? "";
        selectedCourseName = selectedCourse?.Name ?? "";


        user = new User
            {
                Name = "John Doe",
                SelectedEducation = selectedEducation?.Name ?? "",
                SelectedPathway = selectedPathway?.Name ?? "",
                SelectedSpecialization = selectedSpecialization?.Name ?? "",
                SelectedCourse = selectedCourse?.Name ?? ""
            };

        updateSubjectList();
    }

    private void updateSubjectList()
    {
        subjectList = selectedCourse?.Subjects ?? new List<Subject>();
        StateHasChanged();
    }

    public class User
    {
        public string Name { get; set; }
        public string SelectedEducation { get; set; }
        public string SelectedPathway { get; set; }
        public string SelectedSpecialization { get; set; }
        public string SelectedCourse { get; set; }
    }
}
