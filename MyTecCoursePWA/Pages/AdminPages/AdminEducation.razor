@using MyTecCoursePWA.Models;
@using MyTecCoursePWA.Components.Buttons;
@using MyTecCoursePWA.Components.Skeletons;
@using MyTecCoursePWA.Components.List;
@using MyTecCoursePWA.Services;
@inject APIService APIService;
@page "/AdminEducation"

<div class="p-6">
	<h2 class="text-xl font-bold">📚 Administrer Uddannelser</h2>
	<p class="text-gray-500">Her kan du oprette, redigere og slette uddannelser.</p>
	@if (isLoading)
	{
		<SkeletonBox amount="2" />
	}
	else
	{
		<!-- Add New Education Input + Button -->
		<div class="mt-4 flex items-center space-x-2">
			<!-- Input Field for Education Name -->
			<input type="text"
				   class="w-full rounded border p-2 text-gray-700 focus:ring focus:ring-green-300"
				   placeholder="Indtast uddannelsens navn..."
				   @bind="NewEducationName"
				   @bind:event="oninput" />

			<!-- Add Button (Disabled if Input is Empty) -->
			<AdminActionButton ButtonType="add" Icon="➕" Text="Tilføj"
							   OnClick="AddEducationAsync"
							   IsDisabled="@(string.IsNullOrWhiteSpace(NewEducationName))" />
		</div>

		<!-- Reusable List Component -->
		<AdminList TItem="Education"
				   Items="EducationList"
				   GetItemName="e => e.Name"
				   OnEdit="EditEducation"
				   OnDelete="DeleteEducationAsync" />
	}

</div>

@code {

	private List<Education> EducationList = new();
	private string NewEducationName = "";
	private bool isLoading = true;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			string endpoint = "Education";
			EducationList = await APIService.GetAllAsync<Education>(endpoint);
		}
		finally
		{
			await Task.Delay(2000);
			isLoading = false;
			StateHasChanged();
		}
	}

	private async Task AddEducationAsync()
	{
		if (!string.IsNullOrWhiteSpace(NewEducationName))
		{
			string endpoint = "Education";
			var newEducation = new Education { Name = NewEducationName };
			EducationList.Add(await APIService.PostAsync(endpoint, newEducation)); // this is a bad approach since the list is not updated from the API, so no id's are given
			NewEducationName = ""; // Clear input field after adding

		}
	}

	private void EditEducation(Education edu)
	{
		// Open modal or inline editing logic
	}

	private async Task DeleteEducationAsync(Education edu)
	{
		string endpoint = "Education";

		if (await APIService.DeleteAsync<Education>(endpoint, edu.Id))
		{
			EducationList.Remove(edu);
		}

	}

}
