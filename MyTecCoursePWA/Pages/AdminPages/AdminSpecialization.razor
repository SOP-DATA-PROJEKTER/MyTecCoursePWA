@using MyTecCoursePWA.Components.Error
@using MyTecCoursePWA.Components.Skeletons
@using MyTecCoursePWA.Models;
@using MyTecCoursePWA.Components.Buttons;
@using MyTecCoursePWA.Components.List;
@page "/AdminSpecialization"
@inject MockEducationService EducationService
@inject APIService APIService

<div class="">
	<h2 class="text-xl font-bold">🎓 Administrer Specialiseringer</h2>
	<p class="text-gray-500">Her kan du oprette, redigere og slette specialiseringer.</p>

	@if (isApiFailed)
	{
		<ErrorBox />
	}

	@if (isLoading)
	{
		<div class="flex w-full justify-items-center">
			<SkeletonBox amount="2" flexDirection="flex-col" lgWidth="lg:w-full" />
		</div>
	}
	else
	{

		<!-- Select Education -->
		<label class="mt-4 block text-sm font-semibold">Vælg Uddannelse:</label>
		<select class="mt-2 w-full rounded border p-2 @errorStyle" @bind="SelectedEducationId" @bind:event="onchange" disabled="@(isApiFailed)">
			<option value="0">-- Vælg en uddannelse --</option>
			@foreach (var edu in EducationList)
			{
				<option value="@edu.Id">@edu.Name</option>
			}
		</select>

		<!-- Select Pathway (updates dynamically based on selected Education) -->
		<label class="mt-4 block text-sm font-semibold">Vælg Retning:</label>
		<select class="mt-2 w-full rounded border p-2 @errorStyle" @bind="SelectedPathwayId" @bind:event="onchange" disabled="@(SelectedEducation == null || isApiFailed)">
			<option value="0">-- Vælg en retning --</option>
			@if (SelectedEducation != null)
			{
				@foreach (var path in SelectedEducation.Pathways)
				{
					<option value="@path.Id">@path.Name</option>
				}
			}
		</select>

		<!-- Add Specialization -->
		@if (SelectedPathway != null)
		{
			<div class="mt-4 flex items-center space-x-2">
				<input type="text" class="w-full rounded border @errorStyle p-2 text-gray-700 focus:ring focus:ring-green-300"
					   placeholder="Indtast specialiseringens navn..."
					   @bind="NewSpecializationName"
					   @bind:event="oninput"
					   disabled="@(isApiFailed)" />

				<AdminActionButton ButtonType="add" Icon="➕" Text="Tilføj"
								   OnClick="AddSpecializationAsync"
								   IsDisabled="@(string.IsNullOrWhiteSpace(NewSpecializationName))" />
			</div>
		}

		<!-- Specialization List -->
		<div class="mt-6 rounded border p-4">
			<h3 class="text-lg font-semibold">Specialiseringer for: @(SelectedPathway?.Name ?? "Ingen valgt")</h3>

			@if (SelectedPathway != null && SelectedPathway.Specializations.Any())
			{
				<AdminList TItem="Specialization"
						   Items="SelectedPathway.Specializations"
						   GetItemName="s => s.Name"
						   OnEdit="EditSpecialization"
						   OnDelete="DeleteSpecializationAsync" />
			}
			else
			{
				<p class="text-gray-500">⚠️ Ingen specialiseringer fundet. Vælg en retning eller tilføj en.</p>
			}
		</div>
	}

</div>

@code {
	private bool isLoading = true;
	private bool isApiFailed = false;
	private string errorStyle = "";

	private List<Education> EducationList = new();
	private int SelectedEducationId
	{
		get => _selectedEducationId;
		set
		{
			_selectedEducationId = value;
			SelectedEducation = EducationList.FirstOrDefault(e => e.Id == value);
			SelectedPathway = null; // Reset pathway when changing education
			SelectedPathwayId = 0;
			StateHasChanged();
		}
	}
	private int _selectedEducationId = 0;
	private Education? SelectedEducation;

	private int SelectedPathwayId
	{
		get => _selectedPathwayId;
		set
		{
			_selectedPathwayId = value;
			SelectedPathway = SelectedEducation?.Pathways.FirstOrDefault(p => p.Id == value);
			StateHasChanged();
		}
	}
	private int _selectedPathwayId = 0;
	private Pathway? SelectedPathway;

	private string NewSpecializationName = "";

	protected override async Task OnInitializedAsync()
	{
		try
		{
			string endpoint = "Education";
			EducationList = await APIService.GetAllAsync<Education>(endpoint);
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
			isApiFailed = true;
		}
		finally
		{
			isApiFailed = EducationList.Count == 0;
			isLoading = false;
			StateHasChanged();
			if (isApiFailed)
			{
				errorStyle = "bg-gray-200 hover:cursor-not-allowed";
			}
		}
	}

	private async Task AddSpecializationAsync()
	{
		string endpoint = "Specialization";
		if (SelectedPathway != null && !string.IsNullOrWhiteSpace(NewSpecializationName))
		{
			var newSpec = new Specialization
				{
					Name = NewSpecializationName,
					PathwayId = SelectedPathway.Id

				};
			SelectedPathway.Specializations = SelectedPathway.Specializations.Append(await APIService.PostAsync(endpoint, newSpec)).ToList();
			NewSpecializationName = "";
			StateHasChanged();


		}
	}

	private void EditSpecialization(Specialization spec)
	{
		// Logic to edit specialization
	}

	private async Task DeleteSpecializationAsync(Specialization spec)
	{
		string endpoint = "Specialization";
		if (SelectedPathway != null)
		{
			await APIService.DeleteAsync<Specialization>(endpoint, spec.Id);
			SelectedPathway.Specializations.Remove(spec);
			StateHasChanged();
		}
	}
}
