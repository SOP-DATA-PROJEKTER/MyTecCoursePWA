@using MyTecCoursePWA.Components.Error
@using MyTecCoursePWA.Components.Skeletons
@using MyTecCoursePWA.Models
@using MyTecCoursePWA.Components.Modals
@using MyTecCoursePWA.Components.Buttons
@using MyTecCoursePWA.Components.List
@page "/AdminUserManagement"
@inject MockUserService UserService

<div class="">
	<h2 class="text-xl font-bold">👤 Administrer Brugere</h2>
	<p class="text-gray-500">Her kan du søge, tilføje, redigere og slette brugere.</p>
	@if (isApiFailed)
	{
		<ErrorBox />

	}
	@if (isLoading)
	{
		<div class="flex w-full justify-items-center py-8">
			<SkeletonBox amount="2" flexDirection="flex-col" lgWidth="lg:w-full" />
		</div>
	}
	else
	{

		<!-- Søg og Tilføj -->
		<div class="mt-4 flex items-center space-x-2">
			<input type="text"
				   class="w-full rounded border p-2 text-gray-700 focus:ring focus:ring-blue-300 @errorStyle"
			placeholder="Søg efter bruger..."
			@bind="SearchQuery"
			@bind:event="oninput" />

			<AdminActionButton ButtonType="add" Icon="➕" Text="Tilføj"
			OnClick="OpenAddUserModal"/>
		</div>

		<!-- Bruger Liste -->
		<div class="mt-6 rounded border p-4">
			<h3 class="text-lg font-semibold">📜 Brugeroversigt</h3>

			@if (FilteredUsers.Any())
			{
				<AdminList TItem="User"
				Items="FilteredUsers"
				GetItemName="u => u.Name"
				OnEdit="EditUser"
				OnDelete="DeleteUser" 
				isDisabled="@isApiFailed"/>
			}
			else
			{
				<p class="text-gray-500">⚠️ Ingen brugere fundet.</p>
			}
		</div>

		<!-- Tilføj / Rediger Bruger Modal -->
		@if (IsUserModalOpen)
		{
			<EditUserModal EditingUser="EditingUser"
			OnClose="CloseUserModal"
			OnSave="SaveUser" />
		}
	}
</div>

@code {
	private List<User> UserList = new();
	private List<User> FilteredUsers => string.IsNullOrWhiteSpace(SearchQuery)
		? UserList
		: UserList.Where(u => u.Name.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase)).ToList();

	private string SearchQuery = "";
	private bool IsUserModalOpen = false;
	private User EditingUser = new() { Name = string.Empty, Email = string.Empty };

	private bool isLoading = true;
	private bool isApiFailed = false;
	private string errorStyle = "";

	protected override async Task OnInitializedAsync()
	{
		try
		{
			UserList = UserService.GetUserList();
			await Task.Delay(2000);

		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
			isApiFailed = true;
		}
		finally
		{
			isApiFailed = UserList.Count == 0;
			isLoading = false;
			StateHasChanged();
			if (isApiFailed)
			{
				errorStyle = "bg-gray-200 hover:cursor-not-allowed";
			}
		}
	}

	private void OpenAddUserModal()
	{
		EditingUser = new User { Name = "", Email = "", Role = "Bruger" };
		IsUserModalOpen = true;
	}

	private void EditUser(User user)
	{
		EditingUser = new User
			{
				Id = user.Id,
				Name = user.Name,
				Email = user.Email,
				Role = user.Role
			};
		IsUserModalOpen = true;
	}

	private void CloseUserModal()
	{
		IsUserModalOpen = false;
	}

	private void SaveUser(User updatedUser)
	{
		var existingUser = UserList.FirstOrDefault(u => u.Id == updatedUser.Id);
		if (existingUser != null)
		{
			existingUser.Name = updatedUser.Name;
			existingUser.Email = updatedUser.Email;
			existingUser.Role = updatedUser.Role;
		}
		else
		{
			updatedUser.Id = new Random().Next(1000, 9999);
			UserList.Add(updatedUser);
		}

		IsUserModalOpen = false;
		StateHasChanged();
	}

	private void DeleteUser(User user)
	{
		UserList.Remove(user);
		StateHasChanged();
	}
}
