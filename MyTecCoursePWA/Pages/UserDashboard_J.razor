@page "/UserDashboard_J"
@using MyTecCoursePWA.Models

@inject MockEducationService EducationService
@inject MockEducationChoice EducationChoice

<!-- Hamburger Button for Mobile View -->
<div class="p-4 md:hidden">
    <button @onclick="ToggleSidebar" class="text-2xl">
        @sidebarIcon
    </button>
</div>

<!-- Sidebar Overlay (Dimming Effect) -->
@if (isSidebarOpen)
{
    <div class="bg-opacity-50 fixed inset-0 z-40 bg-black" @onclick="ToggleSidebar"></div>
}

<!-- Sidebar -->
<div class="@sidebarClasses">
    <div class="relative z-50 h-full w-64 bg-gray-800 p-6 text-white shadow-md">
        <button @onclick="ToggleSidebar" class="absolute top-2 right-4 text-3xl">✖</button>
        <h3 class="mb-4 text-2xl font-semibold">Filter Options</h3>

        <!-- Education Selection -->
        <div class="mb-4">
            <label class="mb-2 block text-lg font-medium">Education</label>
            <select class="w-full rounded-lg bg-gray-700 p-2" @bind="selectedEducationName">
                <option value="">Select Education</option>
                @foreach (var education in educationList)
                {
                    <option value="@education.Name">@education.Name</option>
                }
            </select>
        </div>

        @if (selectedEducation != null)
        {
            <select class="w-full rounded-lg bg-gray-700 p-2" @bind="selectedPathwayName">
                <option value="">Select Pathway</option>
                @foreach (var pathway in selectedEducation.Pathways)
                {
                    <option value="@pathway.Name">@pathway.Name</option>
                }
            </select>
        }

        @if (selectedPathway != null)
        {
            <select class="w-full rounded-lg bg-gray-700 p-2" @bind="selectedSpecializationName">
                <option value="">Select Specialization</option>
                @foreach (var specialization in selectedPathway.Specializations)
                {
                    <option value="@specialization.Name">@specialization.Name</option>
                }
            </select>
        }

    </div>
</div>

<!-- Main content -->
<div class="main-content bg-gray-200 p-4 transition-all">
    @foreach (var course in courses)
    {
        <div class="courses mb-4 rounded-lg bg-gray-100 p-4 shadow-md">
            <div class="flex cursor-pointer items-center justify-between" @onclick="() => ToggleCourse(course)">
                <div class="text-xl font-semibold text-gray-800">@course.Name</div>
                <div>
                    @if (course.IsCollapsed)
                    {
                        <span class="inline-block rotate-180 transform">▼</span>
                    }
                    else
                    {
                        <span class="inline-block rotate-0 transform">▼</span>
                    }
                </div>
            </div>

            @if (!course.IsCollapsed)
            {
                <div class="subjects mt-4 grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-3">
                    @foreach (var subject in course.Subjects)
                    {
                        <div class="subject card rounded-lg bg-white p-4 shadow-lg">
                            <strong class="text-lg font-semibold text-gray-700">@subject.Name</strong>
                            <p class="text-sm text-gray-500">@subject.Description</p>
                            <div class="milestones mt-4">
                                <h3 class="text-md font-semibold">Milestones</h3>
                                <ul class="list-disc pl-5">
                                    @foreach (var milestone in subject.Milestones)
                                    {
                                        <li class="text-sm text-gray-700">@milestone.Description</li>
                                    }
                                </ul>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

@code {
    private List<CourseDetails> courses = new();
    private List<Education> educationList = new();
    private MyEducationChoice MyEducationChoice;
    private Education? selectedEducation;
    private Pathway? selectedPathway;
    private Specialization? selectedSpecialization;
    private string? selectedEducationName
    {
        get => selectedEducation?.Name;
        set
        {
            selectedEducation = educationList.FirstOrDefault(e => e.Name == value);
            selectedPathway = null;
            selectedSpecialization = null;
            FilterCourses();
        }
    }
    private string? selectedPathwayName
    {
        get => selectedPathway?.Name;
        set
        {
            selectedPathway = selectedEducation?.Pathways.FirstOrDefault(p => p.Name == value);
            selectedSpecialization = null;
            FilterCourses();
        }
    }

    private string? selectedSpecializationName
    {
        get => selectedSpecialization?.Name;
        set
        {
            selectedSpecialization = selectedPathway?.Specializations.FirstOrDefault(s => s.Name == value);
            FilterCourses();
        }
    }




    private bool isSidebarOpen = false;
    private string sidebarIcon = "☰";

    private string sidebarClasses => isSidebarOpen
        ? "fixed left-0 top-0 h-full transition-all z-50"
        : "fixed left-[-100%] top-0 h-full transition-all z-50";

    protected override void OnInitialized()
    {
        MyEducationChoice = EducationChoice.GetMockEducationChoice();
        educationList = EducationService.GetEducationList();

        Console.WriteLine(MyEducationChoice.Education.Name);
        Console.WriteLine(MyEducationChoice.Pathway.Name);
        Console.WriteLine(MyEducationChoice.Specialization.Name);


        // Load saved choices from MockEducationChoice
        selectedEducation = MyEducationChoice.Education;
		selectedPathway = MyEducationChoice.Pathway;
		selectedSpecialization = MyEducationChoice.Specialization;

        FilterCourses();
    }

    private void FilterCourses()
    {
        courses.Clear();
        if (selectedSpecialization != null)
        {
            courses = selectedSpecialization.Courses.Select(c => new CourseDetails
                {
                    Name = c.Name,
                    IsCollapsed = false,
                    Subjects = c.Subjects.Select(s => new SubjectDetails
                    {
                        Name = s.Name,
                        Description = s.Description,
                        Milestones = s.Milestones.ToList()
                    }).ToList()
                }).ToList();
        }
    }

    private void ToggleCourse(CourseDetails course)
    {
        course.IsCollapsed = !course.IsCollapsed;
    }

    private void ToggleSidebar()
    {
        isSidebarOpen = !isSidebarOpen;
        sidebarIcon = isSidebarOpen ? "✖" : "☰";
    }

    public class CourseDetails
    {
        public string Name { get; set; }
        public bool IsCollapsed { get; set; }
        public List<SubjectDetails> Subjects { get; set; }
    }

    public class SubjectDetails
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public List<Milestone> Milestones { get; set; }
    }
}
